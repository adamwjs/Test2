// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: marRSFqQwX6qmgsS5vTWj
// Component: OZFy67lXP-VYwG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: XlgdbmkwhHMXge/component
import Button from "../../Button"; // plasmic-import: yWLjFzWxUuek1/component
import HeroSection from "../../HeroSection"; // plasmic-import: -uKrvthecf1BGm/component
import Footer from "../../Footer"; // plasmic-import: 5Et19WMMuTo-Oh/component

import { useScreenVariants as useScreenVariantsboX3RcDgA0A6O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BoX-3rcDgA0a6O/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_saa_s_website.module.css"; // plasmic-import: marRSFqQwX6qmgsS5vTWj/projectcss
import sty from "./PlasmicFeatures.module.css"; // plasmic-import: OZFy67lXP-VYwG/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: S9mq4Agh-nFfhS/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ki9OdJ413nFLyV/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 6fEnb6NAgv9orA/icon

export type PlasmicFeatures__VariantMembers = {};

export type PlasmicFeatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeatures__VariantsArgs;
export const PlasmicFeatures__VariantProps = new Array<VariantPropType>();

export type PlasmicFeatures__ArgsType = {};
type ArgPropType = keyof PlasmicFeatures__ArgsType;
export const PlasmicFeatures__ArgProps = new Array<ArgPropType>();

export type PlasmicFeatures__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  pageBanner?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  art?: p.Flex<"div">;
  heroSection?: p.Flex<typeof HeroSection>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultFeaturesProps {}

function PlasmicFeatures__RenderFunc(props: {
  variants: PlasmicFeatures__VariantsArgs;
  args: PlasmicFeatures__ArgsType;
  overrides: PlasmicFeatures__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsboX3RcDgA0A6O()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__dP2Yl)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column___1QtuP)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__baob5)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Our Features "}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vHwC9
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__ji0AU)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__mEvfy)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/saa_s_website/images/_3Thumbjpg.jpeg",
                            fullWidth: 700,
                            fullHeight: 466,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/saa_s_website/images/williamHook9E9Pd9BlAtoUnsplashjpg.jpeg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                    }
                  />
                </div>
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__nSy7)}>
            <p.Stack
              as={"section"}
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              hasGap={true}
              className={classNames(projectcss.all, sty.section)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"foreground"}
                data-plasmic-override={overrides.foreground}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__igk1J)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__gKjw
                    )}
                  >
                    {"The standard Lorem Ipsum passage"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zVdsw
                    )}
                  >
                    {
                      "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jlYvk
                    )}
                  >
                    {
                      "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                    }
                  </div>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.freeBox__kVlDf)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__btjlw)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__xak0J
                      )}
                    >
                      {"Built on capability"}
                    </h5>

                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__qOqi3)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___5S2D)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5___78Uz0
                      )}
                    >
                      {"Highly energetic"}
                    </h5>

                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg___14Tgo)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__hp6Ap)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__ojonw
                      )}
                    >
                      {"100% transparency and accountability"}
                    </h5>

                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg___3CkZ2)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__hbtYm)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__fahrQ
                      )}
                    >
                      {"Refreshing clarity"}
                    </h5>

                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__ymqtZ)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__lRca9)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__xgewg
                      )}
                    >
                      {"Modern results"}
                    </h5>

                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg___9V5AL)}
                      role={"img"}
                    />
                  </div>
                </div>
              </p.Stack>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__mKx6W)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yp9Ab)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__skvSn)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vc0F)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__slefo)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy"}
                        data-plasmic-override={overrides.copy}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ijKyj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bUiUw
                            )}
                          >
                            {"Welcome"}
                          </div>

                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__wxh5O
                            )}
                          >
                            {"The standard Lorem "}
                          </h3>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__atLiq
                            )}
                          >
                            {
                              "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                            }
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vcmYa
                          )}
                        >
                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames("__wab_instance", sty.button)}
                            color={"blue" as const}
                            endIcon={
                              <ArrowRightsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yaJol
                                )}
                                role={"img"}
                              />
                            }
                            shape={"rounded" as const}
                            showEndIcon={true}
                          >
                            {"Start Now"}
                          </Button>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <div
                    data-plasmic-name={"art"}
                    data-plasmic-override={overrides.art}
                    className={classNames(projectcss.all, sty.art)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__j57U)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      src={
                        "https://images.unsplash.com/photo-1520333789090-1afc82db536a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2851&q=80" as const
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__udcJk)}
                    />
                  </div>
                </div>
              </p.Stack>
            </div>
          </div>

          <HeroSection
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames("__wab_instance", sty.heroSection)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "pageBanner",
    "columns",
    "h1",
    "section",
    "foreground",
    "copy",
    "button",
    "art",
    "heroSection",
    "footer"
  ],
  header: ["header"],
  pageBanner: ["pageBanner", "columns", "h1"],
  columns: ["columns", "h1"],
  h1: ["h1"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  copy: ["copy", "button"],
  button: ["button"],
  art: ["art"],
  heroSection: ["heroSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  pageBanner: "div";
  columns: "div";
  h1: "h1";
  section: "section";
  foreground: "div";
  copy: "div";
  button: typeof Button;
  art: "div";
  heroSection: typeof HeroSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeatures__VariantsArgs;
    args?: PlasmicFeatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeatures__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeatures__ArgProps,
      internalVariantPropNames: PlasmicFeatures__VariantProps
    });

    return PlasmicFeatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeatures";
  } else {
    func.displayName = `PlasmicFeatures.${nodeName}`;
  }
  return func;
}

export const PlasmicFeatures = Object.assign(
  // Top-level PlasmicFeatures renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    pageBanner: makeNodeComponent("pageBanner"),
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    copy: makeNodeComponent("copy"),
    button: makeNodeComponent("button"),
    art: makeNodeComponent("art"),
    heroSection: makeNodeComponent("heroSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicFeatures
    internalVariantProps: PlasmicFeatures__VariantProps,
    internalArgProps: PlasmicFeatures__ArgProps
  }
);

export default PlasmicFeatures;
/* prettier-ignore-end */
